{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/zompong/Desktop/DemoChat/frontend/components/HomePage/index.js\";\nimport React, { useState } from 'react';\nimport io from 'socket.io-client';\nimport { chat as Chat } from './chat';\nvar socket = io.connect('http://localhost:8000');\nexport var HomePage = function HomePage(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      noti = _useState2[0],\n      setNoti = _useState2[1];\n\n  var handleChat = function handleChat(event) {\n    event.preventDefault();\n    var data = {\n      username: event.target.username.value,\n      message: event.target.message.value\n    };\n    socket.emit('sendMessage', data);\n  };\n\n  socket.on('boardCastMessage', function (data) {\n    setNoti([].concat(_toConsumableArray(noti), [data]));\n  });\n  socket.on('login_notification', function (data) {\n    setNoti([].concat(_toConsumableArray(noti), [data]));\n  });\n  socket.on('user_disconnected', function (data) {\n    setNoti([].concat(_toConsumableArray(noti), [data]));\n  });\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(Chat, {\n    handleChat: handleChat,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), noti.map(function (value, index) {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, value);\n  })));\n};","map":{"version":3,"sources":["/Users/zompong/Desktop/DemoChat/frontend/components/HomePage/index.js"],"names":["React","useState","io","chat","Chat","socket","connect","HomePage","props","noti","setNoti","handleChat","event","preventDefault","data","username","target","value","message","emit","on","map","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,IAAI,IAAIC,IAAjB,QAA6B,QAA7B;AACA,IAAMC,MAAM,GAAGH,EAAE,CAACI,OAAH,CAAW,uBAAX,CAAf;AAGA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAAA,kBACTP,QAAQ,CAAC,EAAD,CADC;AAAA;AAAA,MAC1BQ,IAD0B;AAAA,MACpBC,OADoB;;AAGjC,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAW;AAC5BA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAMC,IAAI,GAAG;AACXC,MAAAA,QAAQ,EAAEH,KAAK,CAACI,MAAN,CAAaD,QAAb,CAAsBE,KADrB;AAEXC,MAAAA,OAAO,EAAEN,KAAK,CAACI,MAAN,CAAaE,OAAb,CAAqBD;AAFnB,KAAb;AAIAZ,IAAAA,MAAM,CAACc,IAAP,CAAY,aAAZ,EAA2BL,IAA3B;AACD,GAPD;;AASAT,EAAAA,MAAM,CAACe,EAAP,CAAU,kBAAV,EAA8B,UAAAN,IAAI,EAAI;AACpCJ,IAAAA,OAAO,8BAAKD,IAAL,IAAWK,IAAX,GAAP;AACD,GAFD;AAGAT,EAAAA,MAAM,CAACe,EAAP,CAAU,oBAAV,EAAgC,UAAAN,IAAI,EAAI;AACtCJ,IAAAA,OAAO,8BAAKD,IAAL,IAAWK,IAAX,GAAP;AACD,GAFD;AAGAT,EAAAA,MAAM,CAACe,EAAP,CAAU,mBAAV,EAA+B,UAAAN,IAAI,EAAI;AACrCJ,IAAAA,OAAO,8BAAKD,IAAL,IAAWK,IAAX,GAAP;AACD,GAFD;AAIA,SACE,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,UAAU,EAAEH,UAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGF,IAAI,CAACY,GAAL,CAAS,UAACJ,KAAD,EAAQK,KAAR,EAAkB;AAC1B,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIL,KAAJ,CAAR;AACD,GAFA,CAFH,CADF,CADF;AAUD,CAhCM","sourcesContent":["import React, { useState } from 'react'\nimport io from 'socket.io-client'\nimport { chat as Chat } from './chat'\nconst socket = io.connect('http://localhost:8000')\n\n\nexport const HomePage = (props) => {\n  const [noti, setNoti] = useState([])\n\n  const handleChat = (event) => {\n    event.preventDefault()\n    const data = {\n      username: event.target.username.value,\n      message: event.target.message.value\n    }\n    socket.emit('sendMessage', data)\n  }\n\n  socket.on('boardCastMessage', data => {\n    setNoti([...noti, data])\n  })\n  socket.on('login_notification', data => {\n    setNoti([...noti, data])\n  })\n  socket.on('user_disconnected', data => {\n    setNoti([...noti, data])\n  })\n\n  return (\n    <>\n      <div>\n        <Chat handleChat={handleChat} />\n        {noti.map((value, index) => {\n          return (<p>{value}</p>)\n        })}\n      </div>\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}